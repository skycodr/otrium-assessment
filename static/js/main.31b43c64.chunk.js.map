{"version":3,"sources":["components/tree/Tree.tsx","components/leaf/Leaf.tsx","utils/index.ts","hooks/useFacets.ts","hooks/useTree.ts","contexts/MenuContext.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Branch","props","root","rootData","keyExtractor","rootExtractor","sourceExtractor","render","TreeItem","nodeId","id","label","map","datum","Tree","className","TreeView","defaultCollapseIcon","defaultExpandIcon","Leaf","checked","onChange","Box","Checkbox","data-testid","onClick","e","stopPropagation","_checked","getCategoryLabel","name","count","getCategoryKey","parent","getCategoryChildFacet","matcher","data","facet","isMatch","Object","entries","key","value","useFacets","dataSource","useState","source","setSource","commitSource","useRef","current","filter","values","matchingSource","updateAll","keys","length","node","push","mappedSource","undefined","useTree","context","childFacetExtractor","getNodes","setNodes","commit","handleSelect","setNodeSelection","forEach","childNode","toggleSelectAll","MenuContext","createContext","_facet","_value","MenuContextProvider","children","json","categories","Provider","useTreeStyles","makeStyles","treeStyle","flexGrow","maxWidth","App","styles","useContext","Grid","direction","container","FormControlLabel","control","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31b43c64.chunk.js","sourcesContent":["import ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { TreeItem, TreeView } from \"@material-ui/lab\";\n\nconst Branch = <T extends ITreeData>(props: IBranchProps<T>) => {\n  const {\n    root,\n    rootData,\n    keyExtractor,\n    rootExtractor,\n    sourceExtractor,\n    render\n  } = props;\n\n  return (\n    <TreeItem nodeId={rootData.id} label={render(rootData)} >\n      {\n        (sourceExtractor?.(root) ?? []).map(datum =>\n          <Branch<T>\n            key={keyExtractor(datum)}\n            {...{ ...props, root: rootExtractor(datum), rootData: datum }}\n          />\n        )\n      }\n    </TreeItem >\n  );\n};\n\n/**\n * Tree component.\n *\n * @param props {ITreeData} ITreeData value.\n * @returns JSX element.\n */\nconst Tree = <T extends ITreeData>(props: ITreeProps<T>) => {\n\n  const {\n    root,\n    keyExtractor,\n    rootExtractor,\n    sourceExtractor,\n    className\n  } = props;\n\n  return (\n    <TreeView\n      className={className}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n    >\n      {\n        (sourceExtractor?.(root) ?? []).map((datum) =>\n          <Branch<T>\n            key={keyExtractor(datum)}\n            {...{ ...props, root: rootExtractor(datum), rootData: datum }}\n          />\n        )\n      }\n    </TreeView>\n  );\n\n}\n\nexport default Tree;\n","import { Box, Checkbox } from \"@material-ui/core\";\n\n/**\n * Component to render as the leaf node of a tree component\n * \n * @param {ILeafProps} props Properties used for the leaf component\n * @returns JSX.Element\n */\nconst Leaf = ({ id, label, checked = false, onChange }: ILeafProps) => (\n  <Box>\n    <Checkbox\n      data-testid={`treeItem_${id}`}\n      onClick={(e) => e.stopPropagation()}\n      onChange={(e, _checked) => onChange?.(e)}\n      checked={checked}\n    />\n    {label}\n  </Box>\n);\n\nexport default Leaf;\n","export const swallow = (..._props: unknown[]) => {};\r\n\r\n/**\r\n * Generates a label from a given ICategory object.\r\n *\r\n * @param {ICategory} param ICategory data.\r\n * @returns {string} A label string.\r\n */\r\nexport const getCategoryLabel = ({ name, count }: ICategory): string =>\r\n  `${name} (${count})`;\r\n\r\n/**\r\n * Generate a key property for given ICategory object.\r\n *\r\n * @param {ICategory} param ICategory data.\r\n * @returns {string} A key for ICategory.\r\n */\r\nexport const getCategoryKey = ({ id, parent }: ICategory): string =>\r\n  `${parent}_${id}`;\r\n\r\n/**\r\n * Generate a facet to retrieve a children for a given node\r\n *\r\n * @param param ITreeData object\r\n * @returns\r\n */\r\nexport const getCategoryChildFacet = ({\r\n  id,\r\n}: ICategory): Partial<ICategory> => ({\r\n  parent: id,\r\n});\r\n\r\n/**\r\n * Generate a facet for retrieving parent nodes\r\n * Todo: For future use\r\n *\r\n * @param param ITreeData object\r\n * @returns\r\n */\r\nexport const getCategoryParentFacet = ({\r\n  parent,\r\n}: ICategory): Partial<ICategory> => ({\r\n  id: parent,\r\n});\r\n\r\n// We don't need _ for just this function\r\nexport const isEmpty = <T extends object>(value: T) =>\r\n  !Object.keys(value).length;\r\n","import { useRef, useState } from 'react';\nimport { isEmpty } from '../utils';\n\n/**\n * Match a given ITreeData object with facet ITreeData object and return\n * true or false\n *\n * @param data ITreeData object that needs to be compared with teh facet\n * @param facet ITreeData object that\n * @returns True or false if exact match is found\n */\nconst matcher = <T extends ITreeData>(data: T, facet: Partial<T>) => {\n  // Todo: Performance deterrent. Move to calling function\n  const entries = Object.entries(facet);\n\n  let isMatch = true;\n\n  /*\n   * Get all key, value pairs in the facet. Check if every key value is a\n   * match in data if so return true. Even on a single property mismatch\n   * break from loop.\n   */\n  for (const [key, value] of entries) {\n    // Dev Note: isMatch &&= data[key] === value seem to crash.\n    isMatch = isMatch && data[key] === value;\n\n    if (!isMatch) {\n      break;\n    }\n  }\n\n  return isMatch;\n};\n\n/**\n * A custom hook to manipulate object in a and array.\n * Allows get/set properties of an ITreeData object\n *\n * @param {ITreeData[]} dataSource A flat array of ITreeData objects\n * @returns [source, getFacets, setFacets]\n */\nconst useFacets = <T extends ITreeData>(\n  dataSource: T[],\n): [T[], TFunction<Partial<T>, T[]>, TFunction<Partial<T>, T[]>, TFunction] => {\n  const [source, setSource] = useState<T[]>(dataSource);\n  const commitSource = useRef<T[] | undefined>();\n\n  /**\n   * Get matching facet data from the source\n   *\n   * @param {ITreeData} facet Object to lookup the source\n   * @returns\n   */\n  const getFacets = (facet: Partial<T>) =>\n    (commitSource.current ?? source).filter((data) => matcher<T>(data, facet));\n\n  /**\n   * Set properties of a given object for a given facet\n   *\n   * @param {ITreeData} facet Partial facet object lookup the source\n   * @param {ITreeData} values Partial value facet object to be set in  on matching facets\n   *\n   * @returns Matching nodes\n   */\n  const setFacets = (facet: Partial<T>, values: Partial<T>) => {\n    // If a commit source is available use the commit source.\n    // Else use the source as the mapped source.\n    const matchingSource: T[] = [];\n\n    // If facets are not available. Assume all values\n    // needs to be updated.\n    const updateAll = isEmpty(facet);\n\n    commitSource.current = (commitSource.current ?? source).map((value) => {\n      let node = { ...value };\n      if (updateAll || matcher<T>(value, facet)) {\n        node = { ...node, ...values };\n        matchingSource.push(node);\n      }\n\n      return node;\n    });\n\n    return matchingSource;\n  };\n\n  /**\n   * Commit any updates to the source data. This act as a\n   * batch update. This was introduced for performance reasons.\n   */\n  const commit = () => {\n    if (!!commitSource.current) {\n      const mappedSource = [...commitSource.current];\n      commitSource.current = undefined;\n      setSource(mappedSource);\n    }\n  };\n\n  return [source, getFacets, setFacets, commit];\n};\n\nexport default useFacets;\n","/**\n * Custom hook provide the Tree with accompanying methods and data.\n *\n * Dev Note:\n *  This solution in not as generic as I would like it to be. As the hook\n *  is coupled to the context API. Ideally, I would pass required methods\n *  to deal with the necessities and have a wrapper to inject data so it is\n *  generic enough to handle all sort of scenarios.\n *\n * @param {ITreeContext} context ITreeContext object which is the data source\n * @param childFacetExtractor\n * @returns\n */\nconst useTree = <T extends ITreeData>(\n  context: ITreeContext<T>,\n  childFacetExtractor: TFunction<T, Partial<T>>,\n): TUseTree<T> => {\n  const { getNodes, setNodes, commit } = context;\n\n  /*\n   * Handle checkbox change event. Create the value to set, update current node\n   * and descendant nodes with the value and commit changes.\n   *\n   * Todo:\n   *  Find the ancestors and move indeterminate sate. This should be a conditional\n   *  state as only if the node is unselected and the parent is selected.\n   */\n\n  const handleSelect: TTreeCheckboxChangeHandler<T> = (datum: T, checked) => {\n    const value = { checked } as Partial<T>;\n\n    const setNodeSelection = (node: T) => {\n      setNodes(node, value);\n      setNodes(childFacetExtractor(node), value).forEach((childNode) =>\n        setNodeSelection(childNode),\n      );\n    };\n\n    setNodeSelection(datum);\n\n    commit();\n  };\n\n  const toggleSelectAll = (checked: boolean) => {\n    setNodes({}, { checked } as Partial<T>);\n    commit();\n  };\n\n  return {\n    handleSelect,\n    toggleSelectAll,\n    getNodes,\n  };\n};\n\nexport default useTree;\n","import { createContext } from \"react\";\nimport { useFacets } from \"../hooks\";\n\nimport json from '../__data__/categories.json';\n\nexport const MenuContext = createContext<ITreeContext<ICategory>>({\n  dataSource: [],\n  getNodes: (_facet) => [],\n  setNodes: (_facet, _value) => [],\n  commit: () => { }\n});\n\nconst MenuContextProvider = ({ children }: IChildren) => {\n  const [\n    dataSource,\n    getNodes,\n    setNodes,\n    commit\n  ] = useFacets<ICategory>(json.data.categories);\n\n  return (\n    <MenuContext.Provider value={{ dataSource, getNodes, setNodes, commit }}>\n      {children}\n    </MenuContext.Provider>\n  );\n};\n\nexport default MenuContextProvider;","import { Checkbox, FormControlLabel, Grid, makeStyles } from '@material-ui/core';\nimport { useContext } from 'react';\nimport { Leaf, Tree } from './components';\nimport { MenuContext } from './contexts';\nimport { useTree } from './hooks';\nimport { getCategoryKey, getCategoryLabel, getCategoryChildFacet } from './utils';\n\nconst useTreeStyles = makeStyles({\n  treeStyle: {\n    flexGrow: 1,\n    maxWidth: 400,\n  },\n});\n\n\nconst App = () => {\n\n  const styles = useTreeStyles();\n  const { getNodes, handleSelect, toggleSelectAll } = useTree<ICategory>(\n    useContext(MenuContext),\n    getCategoryChildFacet);\n\n  /**\n   * Special Note:\n   * \n   * If you want to get all selected categories. Simply write,\n   *  getNodes({checked: true});\n   */\n\n  /*\n   * Dev Note:\n   *\n   *  I have written some confusing logic on purpose. :D. Normally wouldn't do this\n   *  on a project. Such as, bunching up things together without first using variables etc.\n   */\n\n  return (\n    <Grid direction='column' container>\n      <Grid>\n        <FormControlLabel\n          label='Toggle select all'\n          control={<Checkbox data-testid='selectAll' onChange={(e) => toggleSelectAll(e.target.checked)} />} />\n      </Grid>\n      <Grid>\n        <Tree<ICategory>\n          data-testid='treeMenu'\n          className={styles.treeStyle}\n          root={{ parent: '0' }}\n          sourceExtractor={getNodes}\n          keyExtractor={getCategoryKey}\n          rootExtractor={getCategoryChildFacet}\n          // You may find branches are on the tree ;)\n          render={(value: ICategory) => (\n            <Leaf id={value.id} label={getCategoryLabel(value)} onChange={(e) => {\n              e.stopPropagation();\n              handleSelect(value, e.target.checked);\n            }} checked={!!value.checked} />\n          )}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { MenuContextProvider } from './contexts';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MenuContextProvider>\n      <App />\n    </MenuContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}